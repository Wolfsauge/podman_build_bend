ARG BUILDKIT_SBOM_SCAN_CONTEXT=true
ARG BUILDKIT_SBOM_SCAN_STAGE=true
FROM docker.io/archlinux:base-20240101.0.204074 as arch-build-000

RUN pacman -Sy reflector --noconfirm

RUN reflector --country ',' \
    --latest 3 \
    --protocol http,https \
    --save "/etc/pacman.d/mirrorlist" \
    --sort rate

RUN pacman -S --noconfirm \
    haskell-pid1

RUN pacman -S --noconfirm \
    git less nvtop vi which

RUN pacman -S --noconfirm \
    extra/cuda extra/cuda-tools core/gcc

RUN cp /etc/skel/.??* /root

WORKDIR /workspace

# Global profile authoritative for every shell
ENV ENV /etc/profile

# CUDA settings
ENV CUDA_HOME=/opt/cuda
ENV PATH=/opt/cuda/bin:$PATH

# Cargo directory in /opt/cargo
ENV CARGO_HOME=/opt/cargo
ENV PATH="/opt/cargo/bin:${PATH}"
RUN echo -e "append_path '/opt/cargo/bin'\nexport PATH" >> /etc/profile.d/cargo.sh

## Decide, if you want either (A) or (B). The default here is to go with the
##   archlinux method of using pacman to bootstrap the rust nightly build.

# (A) Using the archlinux method of getting rustup
RUN pacman -S --noconfirm \
   rustup
RUN rustup default nightly

# # (B) Using the rust method of getting rustup below is working fine as well
# ENV RUSTUP_HOME=/opt/rustup
# RUN curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | \
#     sh -s -- -y --no-modify-path --profile default --default-toolchain nightly
# ENV PATH="/opt/rustup/bin:${PATH}"

# # FIXME: This is probably a skill issue.. :)
# ENV CC=gcc-13 CXX=g++-13
# RUN ln -s $(which gcc-13) /usr/bin/cc
#
# News:
# - Arch Linux now comes with CUDA 12.5
# - which was built with gcc v14
# - which is was supported in CUDA 12.4
# - the gcc-13 Arch Linux currently comes with, can't produce working CUDA binaries
# - thus I changed the Dockerfile to install core/gcc above and to try to build hvm/bend with it
# - until Arch Linux has fixed all issues, this will fail

# Install HVM
RUN cargo +nightly install hvm

# Install bend-lang
RUN cargo +nightly install bend-lang

ENTRYPOINT ["pid1"]

CMD ["sleep", "infinity"]
